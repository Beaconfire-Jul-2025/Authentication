name: Spring Boot CI/CD

on:
  pull_request:
    branches: [ main ]

permissions:
  pull-requests: write
  contents: write

jobs:
  format:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 8 (for google-java-format compatibility)
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'

      - name: Format Code with Google Java Format Action
        uses: axel-op/googlejavaformat-action@v4
        with:
          args: "--replace"
          github-token: ${{ secrets.GITHUB_TOKEN }}


  build-and-test:
    runs-on: ubuntu-latest
    needs: format
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'
          cache: 'maven'

      - name: Build and Test with Maven
        run: mvn -B package --file pom.xml

      - name: Upload Report
        uses: 'actions/upload-artifact@v4'
        with:
          name: jacoco-report
          path: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml
            ${{ github.workspace }}/target/site/jacoco/index.html

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.2
        with:
          paths: ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 50
          min-coverage-changed-files: 50
          update-comment: true

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  health-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/AuthenticationService
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: mysecretpassword
      FRONTEND_URL: http://localhost:3000
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'

      - name: Download Built JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Start MySQL Docker Container
        run: |
          docker run -d \
            --name mysql \
            -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD=${{ env.SPRING_DATASOURCE_PASSWORD }} \
            -e MYSQL_DATABASE=AuthenticationService \
            -v ${{ github.workspace }}/.mysql:/docker-entrypoint-initdb.d \
            mysql:lts

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to start..."
          for i in $(seq 1 30); do
            # Attempt to ping MySQL. If successful, break the loop.
            if docker exec mysql mysqladmin ping -h localhost -u root -p${{ env.SPRING_DATASOURCE_PASSWORD }}; then
              echo "MySQL is ready!"
              break
            fi
            echo "Attempt $i/30: MySQL not yet ready. Waiting 2 seconds..."
            sleep 2
          done
          # Final check: If MySQL is still not ready after all attempts, fail the job.
          docker exec mysql mysqladmin ping -h localhost -u root -p${{ env.SPRING_DATASOURCE_PASSWORD }} || \
            (echo "Error: MySQL did not start in time." && exit 1)

      - name: Run Spring Boot application
        run: |
          echo "Starting Spring Boot application..."
          nohup java -jar target/*.jar &
          sleep 15 # Give the Spring Boot app enough time to start and connect to the database
            
          echo "Checking application health..."
          # Check the health endpoint. If it fails, the job will fail.
          curl -f http://localhost:8081/actuator/health || \
            (echo "Error: Spring Boot service not responding." && exit 1)
          echo "Spring Boot application is healthy."
            
          # Clean up: Terminate the Java process after verification
          pkill -f 'java -jar'

      - name: Stop MySQL Docker Container
        if: always()
        run: |
          echo "Stopping and removing MySQL container..."
          docker stop mysql && docker rm mysql
